# Print out num to see its current value
num
num <- 0
# Print out num to see its current value
num
# Make a while loop that adds 1 to the variable num until num is 6
while (num < 6) {
num <- num + 1
}
# Print out num
num
hometown <- "Renton, WA"
name <- "Jerome Orille"
age <- "22"
height <- "5\'4\""
mad_libs <- function(noun, verb, p_noun, adj) {
# using cat with manual whitespaces
cat("There are too many ", noun, "-", verb, " ", p_noun, " on this ", adj,
" plane!")
# using cat with no manual whitespaces
#cat("There are too many", noun, "-", verb, p_noun, "on this", adj,
#    "plane!")
# a complex implementation
# https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/cat
#cat("There are too many ", noun, "-", verb, " ", p_noun, " on this ", adj,
#    " plane!", sep = "")
}
mad_libs <- function(noun, verb, p_noun, adj) {
# using cat with manual whitespaces
cat("There are too many ", noun, "-", verb, " ", p_noun, " on this ", adj,
" plane!")
# using cat with no manual whitespaces
#cat("There are too many", noun, "-", verb, p_noun, "on this", adj,
#    "plane!")
# a complex implementation
# https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/cat
#cat("There are too many ", noun, "-", verb, " ", p_noun, " on this ", adj,
#    " plane!", sep = "")
}
mad_libs("song", "singing", "turtles", "incredible")
mad_libs <- function(noun, verb, p_noun, adj) {
# using cat with manual whitespaces
#cat("There are too many ", noun, "-", verb, " ", p_noun, " on this ", adj,
#    " plane!")
# using cat with no manual whitespaces
cat("There are too many", noun, "-", verb, p_noun, "on this", adj,
"plane!")
# a complex implementation
# https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/cat
#cat("There are too many ", noun, "-", verb, " ", p_noun, " on this ", adj,
#    " plane!", sep = "")
}
mad_libs("song", "singing", "turtles", "incredible")
# a complex implementation
# https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/cat
cat("There are too many", noun, "-", verb, " ", p_noun, " on this ", adj,
" plane!", sep = "")
mad_libs <- function(noun, verb, p_noun, adj) {
# using cat with manual whitespaces
#cat("There are too many ", noun, "-", verb, " ", p_noun, " on this ", adj,
#    " plane!")
# using cat with no manual whitespaces
cat("There are too many", noun, "-", verb, p_noun, "on this", adj,
"plane!")
# a complex implementation
# https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/cat
cat("There are too many", noun, "-", verb, " ", p_noun, " on this ", adj,
" plane!", sep = "")
}
mad_libs("song", "singing", "turtles", "incredible")
mad_libs <- function(noun, verb, p_noun, adj) {
# using cat with manual whitespaces
#cat("There are too many ", noun, "-", verb, " ", p_noun, " on this ", adj,
#    " plane!")
# using cat with no manual whitespaces
#cat("There are too many", noun, "-", verb, p_noun, "on this", adj,
#    "plane!")
# a complex implementation
# https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/cat
cat("There are too many", noun, "-", verb, " ", p_noun, " on this ", adj,
" plane!", sep = "")
}
mad_libs("song", "singing", "turtles", "incredible")
mad_libs <- function(noun, verb, p_noun, adj) {
# using cat with manual whitespaces
#cat("There are too many ", noun, "-", verb, " ", p_noun, " on this ", adj,
#    " plane!")
# using cat with no manual whitespaces
#cat("There are too many", noun, "-", verb, p_noun, "on this", adj,
#    "plane!")
# a complex implementation
# https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/cat
cat("There are too many ", noun, "-", verb, " ", p_noun, " on this ", adj,
" plane!", sep = "")
}
mad_libs("song", "singing", "turtles", "incredible")
num <- 0
num <- 0
# Make a for loop that prints out five consecutive numbers
for (x in 1:5) {
print(x)
}
# Print out num to see its current value
num
# Make a while loop that adds 1 to the variable num until num is 6
while (num < 6) {
num <- num + 1
}
# Print out num
num
# Create a variable called "total_ten_loops" that sums up every value in a for
# loop that runs for ten times. What would "total_ten_loops" become as a result?
total_ten_loops <- 0
for (x in 1:10) {
total_ten_loops <- total_ten_loops + x
}
for (x in 1:10) {
total_ten_loops <- total_ten_loops + x
}
for (x in 1:10) { total_ten_loops <- total_ten_loops + x }
# Make a for loop that runs for 13 times. On every odd occurrence of the loop,
# the loop prints out "Odds!" On every even occurrence of the loop, the loop
# prints out "Evens!"
# Hint: is there a specific operator that could be used to check if a number is
# even or odd?
for (y in 1:13) {
if (y %% 2 == 0) {
print("Evens!")
} else {
print("Odds!")
}
}
# anything, just as long as it looks like stairs one can climb!
# Here is an example of a staircase of letters:
# a
# aa
# aaa
# aaaa
# aaaaa
# Hint: would you need more than one loop to create the staircase?
# Hint2: how would you create a new line?
# Hint3: you might need to use sep once or twice :)
for (num1 in 1:5) {
for (num2 in 1:num1) {
cat("a")
}
}
# anything, just as long as it looks like stairs one can climb!
# Here is an example of a staircase of letters:
# a
# aa
# aaa
# aaaa
# aaaaa
# Hint: would you need more than one loop to create the staircase?
# Hint2: how would you create a new line?
# Hint3: you might need to use sep once or twice :)
for (num1 in 1:5) {
stairs <- ""
for (num2 in 1:num1) {
stairs <- cat("a")
}
cat(stairs, sep="\n")
}
install.packages('stringr')
# Load the the `stringr` package
# (you'll need to install it if you haven't used it before)
# It has a variety of functions that make working with string variables easier
library(stringr)
# Create a numeric variable `my_age` that is equal to your age
my_age <- 22
# Create a variable `my_name` that is equal to your first name
my_name <- 'Jerome'
# Using multiplication, create a variable `minutes_in_a_day` that is
# equal to the number of minutes in a day
minutes_in_a_day <- 24 * 60
# Using multiplication, create a variable `hours_in_a_year` that is
# equal to the number of hours in a year
hours_in_a_year <- 365 * 24
# Write a function `make_introduction()` that takes in two args (`name`, `age`)
# This function should return a string value that says:
# Hello, my name is {name}, and I'm {age} years old.
# The values {name} and {age} should take on the values passed into the function
# Make sure that proper spacing is used (e.g., you shouldn't have multiple
# spaces between words, and you should a space after a comma)
make_introduction <- function(name, age) {
cat('Hello, my name is ', name, ', and I\'m ', age, ' years old.', sep = '')
}
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction(my_name, my_age)
# Using the `str_count` function, create a variable `occurrences` that stores
# the # of times the letter "e" appears in `my_intro`
occurrences <- str_count(my_intro, pattern = 'e')
# Using the `str_count` function, create a variable `occurrences` that stores
# the # of times the letter "e" appears in `my_intro`
occurrences <- str_count('Jerome', pattern = 'e')
# Write a function `make_introduction()` that takes in two args (`name`, `age`)
# This function should return a string value that says:
# Hello, my name is {name}, and I'm {age} years old.
# The values {name} and {age} should take on the values passed into the function
# Make sure that proper spacing is used (e.g., you shouldn't have multiple
# spaces between words, and you should a space after a comma)
make_introduction <- function(name, age) {
introduction <- cat('Hello, my name is ', name, ', and I\'m ', age, ' years old.', sep = '')
introduction
}
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction(my_name, my_age)
# Using the `str_count` function, create a variable `occurrences` that stores
# the # of times the letter "e" appears in `my_intro`
occurrences <- str_count(my_intro, pattern = 'e')
# Write a function `make_introduction()` that takes in two args (`name`, `age`)
# This function should return a string value that says:
# Hello, my name is {name}, and I'm {age} years old.
# The values {name} and {age} should take on the values passed into the function
# Make sure that proper spacing is used (e.g., you shouldn't have multiple
# spaces between words, and you should a space after a comma)
make_introduction <- function(name, age) {
introduction <- paste0('Hello, my name is ', name, ', and I\'m ', age, ' years old.')
introduction
}
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction(my_name, my_age)
# Using the `str_count` function, create a variable `occurrences` that stores
# the # of times the letter "e" appears in `my_intro`
occurrences <- str_count(my_intro, pattern = 'e')
# Write a function `make_introduction()` that takes in two args (`name`, `age`)
# This function should return a string value that says:
# Hello, my name is {name}, and I'm {age} years old.
# The values {name} and {age} should take on the values passed into the function
# Make sure that proper spacing is used (e.g., you shouldn't have multiple
# spaces between words, and you should a space after a comma)
make_introduction <- function(name, age) {
introduction <- cat('Hello, my name is ', name, ', and I\'m ', age, ' years old.')
introduction
}
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction(my_name, my_age)
# Write a function `make_introduction()` that takes in two args (`name`, `age`)
# This function should return a string value that says:
# Hello, my name is {name}, and I'm {age} years old.
# The values {name} and {age} should take on the values passed into the function
# Make sure that proper spacing is used (e.g., you shouldn't have multiple
# spaces between words, and you should a space after a comma)
make_introduction <- function(name, age) {
introduction <- paste0('Hello, my name is ', name, ', and I\'m ', age, ' years old.')
introduction
}
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction(my_name, my_age)
# Using the `str_count` function, create a variable `occurrences` that stores
# the # of times the letter "e" appears in `my_intro`
occurrences <- str_count(my_intro, pattern = 'e')
# Create a function `inches_to_cm` that converts from inches to centimeters and
# returns the converted value in cm
inches_to_cm <- function(inches) {
cm <- inches * 2.54
cm
}
# Create a variable `inches_tall` that is your (numeric) height in inches
inches_tall <- 64
# Using your `inches_to_cm` function and your `inches_tall` variable,
# create a variable `cm_tall` that is your height in centimeters
cm_tall <- inches_to_cm(inches_tall)
# Write a function `has_more_zs` to determine which of two strings contains
# more instances of the letter "z". It should take as parameters two string
# variables, and return the argument which has more occurances of the letter "z"
# If neither phrase contains the letter "z", it should return:
# "Neither string contains the letter z."
# If the phrases contain the same number of "z"s, it should return:
# "The strings have the same number of Zs."
# The function must work for both capital and lowercase "z"s.
has_more_zs <- function(str_one, str_two) {
str_one_lower_zs <- str_count(str_one, pattern = 'z')
str_one_upper_zs <- str_count(str_one, pattern = 'Z')
str_one_zs <- str_one_lower_zs + str_one_upper_zs
str_one_zs
}
# Create a variable `more_zs` by passing two strings of your choice to your
# `has_more_zs` function
more_zs <- has_more_zs('zZz', 'a')
# Write a function `has_more_zs` to determine which of two strings contains
# more instances of the letter "z". It should take as parameters two string
# variables, and return the argument which has more occurances of the letter "z"
# If neither phrase contains the letter "z", it should return:
# "Neither string contains the letter z."
# If the phrases contain the same number of "z"s, it should return:
# "The strings have the same number of Zs."
# The function must work for both capital and lowercase "z"s.
has_more_zs <- function(str_one, str_two) {
str_one_lower_zs <- str_count(str_one, pattern = 'z')
str_one_upper_zs <- str_count(str_one, pattern = 'Z')
str_one_zs <- str_one_lower_zs + str_one_upper_zs
str_two_lower_zs <- str_count(str_two, pattern = 'z')
str_two_upper_zs <- str_count(str_two, pattern = 'Z')
str_two_zs <- str_two_lower_zs + str_two_upper_zs
if (str_one_zs == 0 && str_two_zs == 0) {
neither_has_zs <- 'Neither string contains the letter z.'
neither_has_zs
} else if (str_one_zs > str_two_zs) {
str_one_zs
} else if (str_two_zs > str_one_zs) {
str_two_zs
} else {
both_same_zs <- 'The strings have the same number of Zs.'
both_same_zs
}
}
# Create a variable `more_zs` by passing two strings of your choice to your
# `has_more_zs` function
more_zs <- has_more_zs('zZz', 'a')
# Create a variable `more_zs` by passing two strings of your choice to your
# `has_more_zs` function
more_zs <- has_more_zs('zZz', 'zzz')
# Create a variable `more_zs` by passing two strings of your choice to your
# `has_more_zs` function
more_zs <- has_more_zs('aaaa', 'sdfsdf')
# Create a variable `more_zs` by passing two strings of your choice to your
# `has_more_zs` function
more_zs <- has_more_zs('aaaa', 'sdfsdfz')
# Create a variable `more_zs` by passing two strings of your choice to your
# `has_more_zs` function
more_zs <- has_more_zs('aaZzzaZa', 'szdfsZdfz')
# Create a variable `more_zs` by passing two strings of your choice to your
# `has_more_zs` function
more_zs <- has_more_zs('aaZzzaZa', 'szdfsZzzdfz')
# Create a variable `more_zs` by passing two strings of your choice to your
# `has_more_zs` function
more_zs <- has_more_zs('The zebra likes to eat lettuce and catch some zzZ\'s.',
'Eeyore dislikes the letter Z.')
help(stringr)
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(str_vector) {
no_digits_vector <- str_vector[!str_subset(str_vector, '[0123456789')]
no_digits_vector
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
demonstrate_remove_digits <- remove_digits(c("INFO 201", "CSE 142"))
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(str_vector) {
no_digits_vector <- str_vector[!str_subset(str_vector, '[0123456789]')]
no_digits_vector
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
demonstrate_remove_digits <- remove_digits(c("INFO 201", "CSE 142"))
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(str_vector) {
no_digits_vector <- str_vector[str_subset(str_vector, '[0123456789]')]
no_digits_vector
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
demonstrate_remove_digits <- remove_digits(c("INFO 201", "CSE 142"))
no_digits_vector <- str_subset(str_vector, '[0123456789]')
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(str_vector) {
no_digits_vector <- str_subset(str_vector, '[0123456789]')
no_digits_vector
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
demonstrate_remove_digits <- remove_digits(c("INFO 201", "CSE 142"))
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(str_vector) {
no_digits_vector <- str_replace(str_vector, '[0123456789]', '')
no_digits_vector
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
demonstrate_remove_digits <- remove_digits(c("INFO 201", "CSE 142"))
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(str_vector) {
no_digits_vector <- str_replace_all(str_vector, '[0123456789]', '')
no_digits_vector
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
demonstrate_remove_digits <- remove_digits(c("INFO 201", "CSE 142"))
# Write a function `parks_and_rec()` that takes in two args (`weeks`, `hrs`) to
# calculate how many episodes of the show "Parks and Rec" you can watch within a
# given time frame. The weeks arg is how many weeks they have to watch and the
# hrs arg is how many hours of TV they watch a day. Assuming that each episode
# is 21 minutes long, how many episodes can the user watch?
# Return the number of episodes as an numeric type.
parks_and_rec <- function(weeks, hrs) {
minutes_watched <- weeks * 7 * hrs * 60
episodes_watched <- minutes_watched / 21
episodes_watched
}
test_parks_and_rec <- parks_and_rec(1, 4)
test_parks_and_rec <- parks_and_rec(2, 4)
test_parks_and_rec <- parks_and_rec(1, 4)
# Write a function `parks_and_rec()` that takes in two args (`weeks`, `hrs`) to
# calculate how many episodes of the show "Parks and Rec" you can watch within a
# given time frame. The weeks arg is how many weeks they have to watch and the
# hrs arg is how many hours of TV they watch a day. Assuming that each episode
# is 21 minutes long, how many episodes can the user watch?
# Return the number of episodes as an numeric type.
parks_and_rec <- function(weeks, hrs) {
minutes_watched <- weeks * 7 * hrs * 60
episodes_watched <- minutes_watched / 21
floor(episodes_watched)
}
test_parks_and_rec <- parks_and_rec(1, 4)
# Create a vector `movies` that contains the names of six movies you like
movies <- c('Avengers: Endgame', 'Frozen', 'Mulan', 'Nightmare on Elm Street',
'A Silent Voice', 'Hellraiser')
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
top_three <- movies[1:3]
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase - " is a great movie!" to the end of each element `movies`
excited <- paste(movies, ' is a great movie!')
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase - " is a great movie!" to the end of each element `movies`
excited <- paste(movies, 'is a great movie!')
excited
# Create a vector `without_four` by omitting the fourth element from `movies`
# You should do this using a _negative index_
without_four <- movies[-4]
without_four
# add appropriate labels to the display values so the user knows what the value
# means (e.g. if the user enters 6523 fluid ounces, you should display “6523
# fluid ounces is 50 gallon(s), 3 quart(s), 1 pint(s), and 2 gill(s)). Use the
# following hints for your conversion:
# There are 128 fluid ounces in a gallon.
# There are 32 fluid ounces in a quart.
# There are 16 fluid ounces in a pint.
# There are 4 fluid ounces in a gill.
# The modulo (a.k.a. remainder) operator in R is %% and will show the remainder
# left after an integer division.
fluid_conversion <- function(fluid_oz) {
gallon <- fluid_oz / 128
quart <- fluid_oz %% 128 / 32
pint <- fluid_oz %% 128 %% 32 / 16
gill <- fluid_oz %% 128 %% 32 %% 16 / 4
conversion_result <- paste0(fluid_oz, ' fluid ounces is ', gallon,
' gallon(s), ', quart, ' quart(s), ', pint,
' pint(s), and ', gill, ' gill(s).')
}
test_fluid_conversion(6523)
test_fluid_conversion <- fluid_conversion(6523)
test_fluid_conversion
# add appropriate labels to the display values so the user knows what the value
# means (e.g. if the user enters 6523 fluid ounces, you should display “6523
# fluid ounces is 50 gallon(s), 3 quart(s), 1 pint(s), and 2 gill(s)). Use the
# following hints for your conversion:
# There are 128 fluid ounces in a gallon.
# There are 32 fluid ounces in a quart.
# There are 16 fluid ounces in a pint.
# There are 4 fluid ounces in a gill.
# The modulo (a.k.a. remainder) operator in R is %% and will show the remainder
# left after an integer division.
fluid_conversion <- function(fluid_oz) {
gallon <- floor(fluid_oz / 128)
quart <- fluid_oz %% 128 / 32
pint <- fluid_oz %% 128 %% 32 / 16
gill <- fluid_oz %% 128 %% 32 %% 16 / 4
conversion_result <- paste0(fluid_oz, ' fluid ounces is ', gallon,
' gallon(s), ', quart, ' quart(s), ', pint,
' pint(s), and ', gill, ' gill(s).')
}
test_fluid_conversion <- fluid_conversion(6523)
test_fluid_conversion
# add appropriate labels to the display values so the user knows what the value
# means (e.g. if the user enters 6523 fluid ounces, you should display “6523
# fluid ounces is 50 gallon(s), 3 quart(s), 1 pint(s), and 2 gill(s)). Use the
# following hints for your conversion:
# There are 128 fluid ounces in a gallon.
# There are 32 fluid ounces in a quart.
# There are 16 fluid ounces in a pint.
# There are 4 fluid ounces in a gill.
# The modulo (a.k.a. remainder) operator in R is %% and will show the remainder
# left after an integer division.
fluid_conversion <- function(fluid_oz) {
gallon <- floor(fluid_oz / 128)
quart <- floor(fluid_oz %% 128 / 32)
pint <- floor(fluid_oz %% 128 %% 32 / 16)
gill <- floor(fluid_oz %% 128 %% 32 %% 16 / 4)
conversion_result <- paste0(fluid_oz, ' fluid ounces is ', gallon,
' gallon(s), ', quart, ' quart(s), ', pint,
' pint(s), and ', gill, ' gill(s).')
}
test_fluid_conversion <- fluid_conversion(6523)
test_fluid_conversion
install.packages('nycflights13')
library(nycflights13)
version
help(nycflights13)
nycflights13
nycflights13::airlines
View(nycflights13)
data <- nycflights13::airlines
data
install.packages(nycflights13)
setwd("~/Documents/INFO201TA/lastlab/info201_BE_rmarkdown")
knitr::opts_chunk$set(echo = TRUE)
source('code.R')
View(wa_pop_2008)
